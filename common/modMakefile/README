用于快速在项目中使用mod 或 清除mod

一. 使用 Mod 开发:

--1) 准备：
1. 检查系统已经打开Mod的设置
  执行:   go env
  查看　GO111MODULE="on" or "auto"
  如果为 "off", 执行: export GO111MODULE="on" or "auto"

2. 检查是否设置 GOPATH
  执行: echo $GOPATH
  如果为空或不正确,执行: export GOPATH=正确的gopath  (建议将此句写入~/.bashrc的最后一行)

3.  复制　$GOPATH/src/gworld/git/GoFrameWork/common/modMakefile 下的"Makefile" 和".gitignore" 到项目工作目录
  例：　cp $GOPATH/src/gworld/git/GoFrameWork/common/modMakefile/Makefile  $myservice-path
        cp $GOPATH/src/gworld/git/GoFrameWork/common/modMakefile/.gitignore $myservice-path

4．第一次使用Mod方式需要建立 gworld/git　相关的依赖．(只第一次设置Mod时需要，以后项目中不需要!!!)
  执行： make clearall; make initbase


--2)使用：
1. 在项目目录下．创建go.mod (如果已有略过次步)
　　执行： make initmod  创建

2. 编译项目
　　执行：　make

OK!  （第二步可以直接 go build 来操作. 如果在代码中增加新的依赖go build 报依赖错误时可以通过执行 make　来修正）

--3)其他操作：
１. 想清除本地可执行文件
	make clean

2. 清除本地go.mod go.sum
    make cleanmod

3. 可以将 "Makefile" 和 ".gitignore"加入到项目的git 中
	略...


二. 从Mod　切回 GOPAHT 模式开放

１. 将 GO111MODULE 设成 "off"
  执行:  export GO111MODULE="off"

2. 清理所有相关的 go.mod
  执行:  make clearall

OK! 

三. Q&A:

1. 如果GoFrameWork 下的基础库有增改, 需要重建 gworld/git 相关的依赖
	执行： make initbase

2. 做过一次 "准备" 操作,　在另外的项目中的使用:
    先复制 $GOPATH/src/gworld/git/GoFrameWork/common/modMakefile
下的"Makefile" 和".gitignore" 到项目工作目录 (参见 "准备"->3步)
　　按照　"使用"中的说明操作

3. 程序中　import　的库如果区分　mod　或 gopath,需要手工修改代码做适配!!!
